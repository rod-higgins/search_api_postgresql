<?php

/**
 * @file
 * Contains search_api_postgresql.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\search_api\ServerInterface;

/**
 * Implements hook_help().
 */
function search_api_postgresql_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.search_api_postgresql':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Search API PostgreSQL module provides a PostgreSQL backend for the Search API module with native full-text search and AI-powered vector search capabilities.') . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Native PostgreSQL full-text search using tsvector') . '</li>';
      $output .= '<li>' . t('AI-powered semantic search using OpenAI embeddings') . '</li>';
      $output .= '<li>' . t('Hybrid search combining traditional and vector search') . '</li>';
      $output .= '<li>' . t('Secure credential storage using Key module') . '</li>';
      $output .= '<li>' . t('Queue-based embedding generation') . '</li>';
      $output .= '<li>' . t('Comprehensive analytics and monitoring') . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function search_api_postgresql_cron() {
  try {
    // Process embedding queue
    $queue_manager = \Drupal::service('search_api_postgresql.embedding_queue_manager');
    if ($queue_manager) {
      $queue_manager->processQueue(['max_items' => 50, 'max_time' => 30]);
    }

    // Clean up old cache entries
    $cache_manager = \Drupal::service('search_api_postgresql.cache_manager');
    if ($cache_manager) {
      $cache_manager->performMaintenance();
    }

    // Update analytics aggregates
    $analytics = \Drupal::service('search_api_postgresql.analytics');
    if ($analytics) {
      $analytics->aggregateDailyStats();
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('search_api_postgresql')->error('Error in cron: @message', [
      '@message' => $e->getMessage(),
    ]);
  }
}

/**
 * Implements hook_entity_delete().
 */
function search_api_postgresql_search_api_server_delete(ServerInterface $server) {
  // Clean up server-specific data
  $backend = $server->getBackend();
  if ($backend && in_array($backend->getPluginId(), ['postgresql', 'postgresql_vector', 'azure_postgresql_vector'])) {
    try {
      $database = \Drupal::database();
      $schema = $database->schema();
      
      // Check if tables exist before trying to delete
      $tables_to_clean = [
        'search_api_postgresql_analytics',
        'search_api_postgresql_embedding_cache',
        'search_api_postgresql_metrics',
        'search_api_postgresql_daily_aggregates',
      ];
      
      foreach ($tables_to_clean as $table) {
        if ($schema->tableExists($table)) {
          $database->delete($table)
            ->condition('server_id', $server->id())
            ->execute();
        }
      }
      
      \Drupal::logger('search_api_postgresql')->info('Cleaned up data for deleted server: @server', [
        '@server' => $server->id(),
      ]);
    }
    catch (\Exception $e) {
      \Drupal::logger('search_api_postgresql')->error('Error cleaning up server data: @message', [
        '@message' => $e->getMessage(),
      ]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function search_api_postgresql_theme() {
  return [
    'search_api_postgresql_stat_card' => [
      'variables' => [
        'title' => '',
        'value' => '',
        'subtitle' => '',
        'icon' => '',
        'color' => 'blue',
      ],
    ],
    'search_api_postgresql_metric_chart' => [
      'variables' => [
        'title' => '',
        'data' => [],
        'type' => 'line',
        'unit' => '',
      ],
    ],
    'search_api_postgresql_cost_card' => [
      'variables' => [
        'title' => '',
        'cost' => 0,
        'api_calls' => 0,
        'tokens' => 0,
        'trend' => 0,
        'is_projection' => FALSE,
      ],
    ],
  ];
}

/**
 * Implements hook_requirements().
 */
function search_api_postgresql_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    // Check if pgvector extension is available
    $requirements['search_api_postgresql_pgvector'] = [
      'title' => t('PostgreSQL pgvector extension'),
      'value' => t('Not checked'),
      'severity' => REQUIREMENT_INFO,
      'description' => t('The pgvector extension is required for AI-powered vector search functionality.'),
    ];

    // Check if Key module is enabled
    $requirements['search_api_postgresql_key'] = [
      'title' => t('Key module'),
    ];

    if (\Drupal::moduleHandler()->moduleExists('key')) {
      $requirements['search_api_postgresql_key']['value'] = t('Enabled');
      $requirements['search_api_postgresql_key']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['search_api_postgresql_key']['value'] = t('Not enabled');
      $requirements['search_api_postgresql_key']['severity'] = REQUIREMENT_WARNING;
      $requirements['search_api_postgresql_key']['description'] = t('The Key module is recommended for secure storage of API credentials.');
    }

    // Check analytics tables
    try {
      $analytics = \Drupal::service('search_api_postgresql.analytics');
      if ($analytics) {
        $requirements['search_api_postgresql_analytics'] = [
          'title' => t('Search API PostgreSQL Analytics'),
          'value' => t('Tables initialized'),
          'severity' => REQUIREMENT_OK,
        ];
      }
    }
    catch (\Exception $e) {
      $requirements['search_api_postgresql_analytics'] = [
        'title' => t('Search API PostgreSQL Analytics'),
        'value' => t('Error'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('Analytics tables could not be initialized: @error', [
          '@error' => $e->getMessage(),
        ]),
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function search_api_postgresql_install() {
  // Initialize analytics tables
  try {
    $analytics = \Drupal::service('search_api_postgresql.analytics');
    \Drupal::messenger()->addMessage(t('Search API PostgreSQL analytics tables initialized.'));
  }
  catch (\Exception $e) {
    \Drupal::messenger()->addError(t('Failed to initialize analytics tables: @error', [
      '@error' => $e->getMessage(),
    ]));
  }
}

/**
 * Implements hook_uninstall().
 */
function search_api_postgresql_uninstall() {
  // Remove analytics tables
  $tables = [
    'search_api_postgresql_analytics',
    'search_api_postgresql_metrics',
    'search_api_postgresql_daily_aggregates',
    'search_api_postgresql_embedding_cache',
  ];

  $database = \Drupal::database();
  $schema = $database->schema();

  foreach ($tables as $table) {
    if ($schema->tableExists($table)) {
      $schema->dropTable($table);
    }
  }

  // Remove configuration
  \Drupal::configFactory()->getEditable('search_api_postgresql.settings')->delete();
  \Drupal::configFactory()->getEditable('search_api_postgresql.dashboard')->delete();
}