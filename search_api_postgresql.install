<?php

/**
 * @file
 * Install, update and uninstall functions for the Search API PostgreSQL module.
 */

use Drupal\Core\Utility\UpdateException;

/**
 * Implements hook_requirements().
 */
function search_api_postgresql_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    // Check if PDO PostgreSQL is available.
    if (!extension_loaded('pdo_pgsql')) {
      $requirements['search_api_postgresql_pdo'] = [
        'title' => t('Search API PostgreSQL'),
        'value' => t('PDO PostgreSQL extension not found'),
        'description' => t('The Search API PostgreSQL module requires the PDO PostgreSQL extension to be installed.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
    else {
      $requirements['search_api_postgresql_pdo'] = [
        'title' => t('Search API PostgreSQL'),
        'value' => t('PDO PostgreSQL extension found'),
        'severity' => REQUIREMENT_OK,
      ];
    }

    // Check if Key module is available (required for secure storage).
    if (!\Drupal::moduleHandler()->moduleExists('key')) {
      $requirements['search_api_postgresql_key'] = [
        'title' => t('Search API PostgreSQL - Key Module'),
        'value' => t('Key module not found'),
        'description' => t('The Search API PostgreSQL module requires the Key module for secure credential storage. Please install and enable the <a href="@url">Key module</a>.', [
          '@url' => 'https://www.drupal.org/project/key',
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
    else {
      $requirements['search_api_postgresql_key'] = [
        'title' => t('Search API PostgreSQL - Key Module'),
        'value' => t('Key module found'),
        'severity' => REQUIREMENT_OK,
      ];
    }

    // Check for insecure configuration.
    $insecure_servers = search_api_postgresql_check_insecure_configuration();
    if (!empty($insecure_servers)) {
      $requirements['search_api_postgresql_security'] = [
        'title' => t('Search API PostgreSQL - Security'),
        'value' => t('Insecure configuration detected'),
        'description' => t('The following servers have insecure credential storage: @servers. Please update your configuration to use the Key module for secure credential storage.', [
          '@servers' => implode(', ', $insecure_servers),
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
    else {
      $requirements['search_api_postgresql_security'] = [
        'title' => t('Search API PostgreSQL - Security'),
        'value' => t('Secure configuration'),
        'description' => t('All credentials are stored securely using the Key module.'),
        'severity' => REQUIREMENT_OK,
      ];
    }
  }

  return $requirements;
}

/**
 * Check for servers with insecure configuration.
 *
 * @return array
 *   Array of server IDs with insecure configuration.
 */
function search_api_postgresql_check_insecure_configuration() {
  $insecure_servers = [];
  
  /** @var \Drupal\search_api\ServerInterface[] $servers */
  $servers = \Drupal::entityTypeManager()
    ->getStorage('search_api_server')
    ->loadByProperties(['backend' => ['postgresql', 'postgresql_azure']]);

  foreach ($servers as $server) {
    $config = $server->getBackendConfig();
    
    // Check for plain text password
    if (!empty($config['connection']['password']) && empty($config['connection']['password_key'])) {
      $insecure_servers[] = $server->id();
      continue;
    }
    
    // Check for plain text API keys
    if (!empty($config['ai_embeddings']['azure_ai']['api_key']) && empty($config['ai_embeddings']['azure_ai']['api_key_name'])) {
      $insecure_servers[] = $server->id();
      continue;
    }
    
    if (!empty($config['azure_embedding']['api_key']) && empty($config['azure_embedding']['api_key_name'])) {
      $insecure_servers[] = $server->id();
      continue;
    }
  }

  return $insecure_servers;
}

/**
 * Update 8001: Migrate to secure key storage.
 */
function search_api_postgresql_update_8001(&$sandbox) {
  $messenger = \Drupal::messenger();
  
  // Check if Key module is installed
  if (!\Drupal::moduleHandler()->moduleExists('key')) {
    throw new UpdateException('The Key module must be installed before running this update. Please install the Key module first.');
  }

  $servers = \Drupal::entityTypeManager()
    ->getStorage('search_api_server')
    ->loadByProperties(['backend' => ['postgresql', 'postgresql_azure']]);

  if (empty($servers)) {
    return t('No PostgreSQL servers found to update.');
  }

  $updated_servers = [];
  $manual_migration_needed = [];

  foreach ($servers as $server) {
    $config = $server->getBackendConfig();
    $needs_update = FALSE;
    
    // Check for plain text credentials that need migration
    if (!empty($config['connection']['password']) && empty($config['connection']['password_key'])) {
      $manual_migration_needed[] = $server->id() . ' (database password)';
    }
    
    if (!empty($config['ai_embeddings']['azure_ai']['api_key']) && empty($config['ai_embeddings']['azure_ai']['api_key_name'])) {
      $manual_migration_needed[] = $server->id() . ' (Azure AI API key)';
    }
    
    if (!empty($config['azure_embedding']['api_key']) && empty($config['azure_embedding']['api_key_name'])) {
      $manual_migration_needed[] = $server->id() . ' (Azure embedding API key)';
    }

    // Update configuration structure (remove old plain text fields)
    if (isset($config['connection']['password'])) {
      unset($config['connection']['password']);
      $needs_update = TRUE;
    }
    
    if (isset($config['ai_embeddings']['azure_ai']['api_key'])) {
      unset($config['ai_embeddings']['azure_ai']['api_key']);
      $needs_update = TRUE;
    }
    
    if (isset($config['azure_embedding']['api_key'])) {
      unset($config['azure_embedding']['api_key']);
      $needs_update = TRUE;
    }

    if ($needs_update) {
      $server->setBackendConfig($config);
      $server->save();
      $updated_servers[] = $server->id();
    }
  }

  $message = '';
  if (!empty($updated_servers)) {
    $message .= t('Updated configuration for servers: @servers. ', [
      '@servers' => implode(', ', $updated_servers),
    ]);
  }

  if (!empty($manual_migration_needed)) {
    $message .= t('MANUAL ACTION REQUIRED: The following servers have plain text credentials that must be migrated to the Key module: @servers. Please create appropriate keys and update the server configuration manually.', [
      '@servers' => implode(', ', $manual_migration_needed),
    ]);
    $messenger->addError($message);
  }
  else {
    $message .= t('All servers are using secure key storage.');
    $messenger->addStatus($message);
  }

  return $message;
}

/**
 * Implements hook_install().
 */
function search_api_postgresql_install() {
  $messenger = \Drupal::messenger();
  
  if (!\Drupal::moduleHandler()->moduleExists('key')) {
    $messenger->addWarning(t('The Key module is required for secure credential storage. Please install and enable the <a href="@url">Key module</a> before configuring PostgreSQL servers.', [
      '@url' => 'https://www.drupal.org/project/key',
    ]));
  }
  else {
    $messenger->addStatus(t('Search API PostgreSQL installed successfully. All credentials will be stored securely using the Key module.'));
  }
}