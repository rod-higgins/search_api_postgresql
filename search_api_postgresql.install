<?php

/**
 * @file
 * Install, update and uninstall functions for the Search API PostgreSQL module.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_schema().
 */
function search_api_postgresql_schema() {
  $schema = [];

  // Analytics table
  $schema['search_api_postgresql_analytics'] = [
    'description' => 'Analytics data for Search API PostgreSQL embedding operations',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary key',
      ],
      'server_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Server ID',
      ],
      'operation' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Operation type',
      ],
      'token_count' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of tokens',
      ],
      'cost_usd' => [
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 6,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Cost in USD',
      ],
      'duration_ms' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Duration in milliseconds',
      ],
      'metadata' => [
        'type' => 'text',
        'description' => 'Additional metadata as JSON',
      ],
      'timestamp' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Unix timestamp',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'server_timestamp' => ['server_id', 'timestamp'],
      'operation_timestamp' => ['operation', 'timestamp'],
      'timestamp' => ['timestamp'],
    ],
  ];

  // Performance metrics table
  $schema['search_api_postgresql_metrics'] = [
    'description' => 'Performance metrics for Search API PostgreSQL',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary key',
      ],
      'server_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Server ID',
      ],
      'index_id' => [
        'type' => 'varchar',
        'length' => 255,
        'description' => 'Index ID (optional)',
      ],
      'metric_type' => [
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'description' => 'Metric type (search, cache, etc)',
      ],
      'metric_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Specific metric name',
      ],
      'value' => [
        'type' => 'numeric',
        'precision' => 15,
        'scale' => 6,
        'not null' => TRUE,
        'description' => 'Metric value',
      ],
      'metadata' => [
        'type' => 'text',
        'description' => 'Additional metadata as JSON',
      ],
      'timestamp' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Unix timestamp',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'metric_timestamp' => ['metric_type', 'metric_name', 'timestamp'],
      'server_timestamp' => ['server_id', 'timestamp'],
      'timestamp' => ['timestamp'],
    ],
  ];

  // Daily aggregates table
  $schema['search_api_postgresql_daily_aggregates'] = [
    'description' => 'Daily aggregated statistics for Search API PostgreSQL',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary key',
      ],
      'date' => [
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'description' => 'Date (YYYY-MM-DD)',
      ],
      'server_id' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Server ID',
      ],
      'operation' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Operation type',
      ],
      'total_calls' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Total API calls',
      ],
      'total_cost' => [
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 6,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Total cost in USD',
      ],
      'total_tokens' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Total tokens processed',
      ],
      'avg_duration' => [
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Average duration in milliseconds',
      ],
      'created' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Timestamp when aggregate was created',
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      'date_server_operation' => ['date', 'server_id', 'operation'],
    ],
    'indexes' => [
      'date' => ['date'],
      'server_date' => ['server_id', 'date'],
    ],
  ];

  // CORRECTED: Embedding cache table - Updated to match DatabaseEmbeddingCache expectations
  $schema['search_api_postgresql_embedding_cache'] = [
    'description' => 'Cache table for embedding vectors.',
    'fields' => [
      'text_hash' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'SHA256 hash of the text.',
      ],
      'embedding_data' => [
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'description' => 'Serialized and possibly compressed embedding vector.',
      ],
      'dimensions' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Number of dimensions in the vector.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Unix timestamp when created.',
      ],
      'last_accessed' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Unix timestamp when last accessed.',
      ],
      'expires' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Unix timestamp when expires.',
      ],
      'hit_count' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of times accessed.',
      ],
    ],
    'primary key' => ['text_hash'],
    'indexes' => [
      'expires' => ['expires'],
      'last_accessed' => ['last_accessed'],
      'created' => ['created'],
    ],
  ];

  return $schema;
}

/**
 * Add the daily aggregates table for analytics.
 */
function search_api_postgresql_update_8001() {
  $schema = Database::getConnection()->schema();
  
  if (!$schema->tableExists('search_api_postgresql_daily_aggregates')) {
    $table_spec = [
      'description' => 'Daily aggregated statistics for Search API PostgreSQL',
      'fields' => [
        'id' => [
          'type' => 'serial',
          'not null' => TRUE,
          'description' => 'Primary key',
        ],
        'date' => [
          'type' => 'varchar',
          'length' => 10,
          'not null' => TRUE,
          'description' => 'Date (YYYY-MM-DD)',
        ],
        'server_id' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'Server ID',
        ],
        'operation' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'Operation type',
        ],
        'total_calls' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Total API calls',
        ],
        'total_cost' => [
          'type' => 'numeric',
          'precision' => 10,
          'scale' => 6,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Total cost in USD',
        ],
        'total_tokens' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Total tokens processed',
        ],
        'avg_duration' => [
          'type' => 'numeric',
          'precision' => 10,
          'scale' => 2,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Average duration in milliseconds',
        ],
        'created' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Timestamp when aggregate was created',
        ],
      ],
      'primary key' => ['id'],
      'unique keys' => [
        'date_server_operation' => ['date', 'server_id', 'operation'],
      ],
      'indexes' => [
        'date' => ['date'],
        'server_date' => ['server_id', 'date'],
      ],
    ];
    
    $schema->createTable('search_api_postgresql_daily_aggregates', $table_spec);
    
    return t('Created the daily aggregates table for analytics.');
  }
  
  return t('Daily aggregates table already exists.');
}

/**
 * Clear cache to pick up new service methods.
 */
function search_api_postgresql_update_8002() {
  // Clear all caches to ensure the service container is rebuilt
  drupal_flush_all_caches();
  
  return t('Cleared caches to register new analytics service methods.');
}

/**
 * Implements hook_requirements().
 */
function search_api_postgresql_requirements($phase) {
  $requirements = [];

  // During uninstall, check for active servers using this backend
  if ($phase == 'uninstall') {
    $servers = \Drupal::entityTypeManager()
      ->getStorage('search_api_server')
      ->loadByProperties([
        'backend' => [
          'postgresql', 
          'postgresql_vector', 
          'azure_postgresql_vector'
        ]
      ]);

    if (!empty($servers)) {
      $server_list = [];
      foreach ($servers as $server) {
        $server_list[] = $server->label() . ' (' . $server->id() . ')';
      }

      $requirements['search_api_postgresql_active_servers'] = [
        'title' => t('Active PostgreSQL Search Servers'),
        'value' => t('@count active servers found', ['@count' => count($servers)]),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('Cannot uninstall Search API PostgreSQL while servers are still using this backend. Please delete the following servers first: @servers', [
          '@servers' => implode(', ', $server_list),
        ]),
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function search_api_postgresql_uninstall() {
  // Safety check - this should be caught by hook_requirements, but double-check
  $servers = \Drupal::entityTypeManager()
    ->getStorage('search_api_server')
    ->loadByProperties([
      'backend' => [
        'postgresql', 
        'postgresql_vector', 
        'azure_postgresql_vector'
      ]
    ]);

  if (!empty($servers)) {
    $server_names = [];
    foreach ($servers as $server) {
      $server_names[] = $server->label();
    }
    
    \Drupal::messenger()->addError(t('Cannot uninstall: Active servers found (@servers). Please delete all PostgreSQL search servers before uninstalling this module.', [
      '@servers' => implode(', ', $server_names),
    ]));
    
    throw new \Exception('Cannot uninstall module while servers are active');
  }

  // Only proceed if no active servers
  $database = \Drupal::database();
  $schema = $database->schema();

  // Remove module-specific tables (NOT user search indexes)
  $tables = [
    'search_api_postgresql_analytics',
    'search_api_postgresql_metrics', 
    'search_api_postgresql_daily_aggregates',
    'search_api_postgresql_embedding_cache',
  ];

  $removed_tables = [];
  foreach ($tables as $table) {
    if ($schema->tableExists($table)) {
      $schema->dropTable($table);
      $removed_tables[] = $table;
    }
  }

  // Remove configuration
  \Drupal::configFactory()->getEditable('search_api_postgresql.settings')->delete();
  \Drupal::configFactory()->getEditable('search_api_postgresql.dashboard')->delete();
  \Drupal::configFactory()->getEditable('search_api_postgresql.embedding_cache')->delete();

  // Log what was removed
  if (!empty($removed_tables)) {
    \Drupal::logger('search_api_postgresql')->info('Uninstalled Search API PostgreSQL module. Removed tables: @tables', [
      '@tables' => implode(', ', $removed_tables),
    ]);
  }

  \Drupal::messenger()->addMessage(t('Search API PostgreSQL module uninstalled successfully. Analytics data has been removed.'));
}