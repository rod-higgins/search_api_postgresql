<?php

/**
 * @file
 * Install, update and uninstall functions for the Search API PostgreSQL module.
 */

/**
 * Implements hook_schema().
 */
function search_api_postgresql_schema() {
  $schema = [];

  // Embedding cache table
  $schema['search_api_postgresql_embedding_cache'] = [
    'description' => 'Cache table for AI embeddings.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary key.',
      ],
      'server_id' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'description' => 'The server ID.',
      ],
      'text_hash' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'SHA256 hash of the text.',
      ],
      'embedding' => [
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'description' => 'Compressed embedding vector.',
      ],
      'dimension' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Vector dimension.',
      ],
      'model' => [
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'description' => 'Model used to generate embedding.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Timestamp when created.',
      ],
      'accessed' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Timestamp when last accessed.',
      ],
      'hits' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of cache hits.',
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      'server_text' => ['server_id', 'text_hash'],
    ],
    'indexes' => [
      'created' => ['created'],
      'accessed' => ['accessed'],
      'server_model' => ['server_id', 'model'],
    ],
  ];

  // Analytics table
  $schema['search_api_postgresql_analytics'] = [
    'description' => 'Analytics data for embedding operations.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary key.',
      ],
      'server_id' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'description' => 'The server ID.',
      ],
      'operation' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'description' => 'Operation type.',
      ],
      'timestamp' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'When the operation occurred.',
      ],
      'duration_ms' => [
        'type' => 'int',
        'description' => 'Duration in milliseconds.',
      ],
      'token_count' => [
        'type' => 'int',
        'description' => 'Number of tokens processed.',
      ],
      'cost' => [
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 6,
        'description' => 'Cost in USD.',
      ],
      'success' => [
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Whether operation succeeded.',
      ],
      'error_type' => [
        'type' => 'varchar',
        'length' => 100,
        'description' => 'Error type if failed.',
      ],
      'metadata' => [
        'type' => 'text',
        'serialize' => TRUE,
        'description' => 'Additional metadata.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'server_timestamp' => ['server_id', 'timestamp'],
      'operation' => ['operation'],
      'timestamp' => ['timestamp'],
    ],
  ];

  // Cost tracking table
  $schema['search_api_postgresql_costs'] = [
    'description' => 'Daily cost aggregates.',
    'fields' => [
      'server_id' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'description' => 'The server ID.',
      ],
      'date' => [
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'description' => 'Date in YYYY-MM-DD format.',
      ],
      'model' => [
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'description' => 'Model name.',
      ],
      'operation_count' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of operations.',
      ],
      'token_count' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Total tokens.',
      ],
      'total_cost' => [
        'type' => 'numeric',
        'precision' => 10,
        'scale' => 6,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Total cost in USD.',
      ],
    ],
    'primary key' => ['server_id', 'date', 'model'],
    'indexes' => [
      'date' => ['date'],
    ],
  ];

  // Performance metrics table
  $schema['search_api_postgresql_metrics'] = [
    'description' => 'Performance metrics.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary key.',
      ],
      'server_id' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'description' => 'The server ID.',
      ],
      'metric_type' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'description' => 'Type of metric.',
      ],
      'timestamp' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'When measured.',
      ],
      'value' => [
        'type' => 'numeric',
        'precision' => 20,
        'scale' => 6,
        'not null' => TRUE,
        'description' => 'Metric value.',
      ],
      'metadata' => [
        'type' => 'text',
        'serialize' => TRUE,
        'description' => 'Additional context.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'server_metric_time' => ['server_id', 'metric_type', 'timestamp'],
      'timestamp' => ['timestamp'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function search_api_postgresql_install() {
  // Set default configuration values
  \Drupal::configFactory()->getEditable('search_api_postgresql.settings')
    ->set('embedding_cache.default_ttl', 604800) // 7 days
    ->set('embedding_cache.max_entries', 100000)
    ->set('embedding_cache.compression', TRUE)
    ->set('queue.batch_size', 10)
    ->set('queue.max_retries', 3)
    ->set('analytics.retention_days', 90)
    ->save();

  // Create initial queue for embedding generation
  $queue_factory = \Drupal::service('queue');
  $queue_factory->get('search_api_postgresql_embedding');
  
  \Drupal::messenger()->addStatus(t('Search API PostgreSQL module installed successfully.'));
}

/**
 * Implements hook_uninstall().
 */
function search_api_postgresql_uninstall() {
  // Remove configuration
  \Drupal::configFactory()->getEditable('search_api_postgresql.settings')->delete();
  
  // Delete queues
  $queue_factory = \Drupal::service('queue');
  $queue_factory->get('search_api_postgresql_embedding')->deleteQueue();
  
  // Note: Schema tables will be removed automatically
}

/**
 * Add analytics and cache tables.
 */
function search_api_postgresql_update_8001() {
  $schema = search_api_postgresql_schema();
  
  if (!db_table_exists('search_api_postgresql_embedding_cache')) {
    db_create_table('search_api_postgresql_embedding_cache', $schema['search_api_postgresql_embedding_cache']);
  }
  
  if (!db_table_exists('search_api_postgresql_analytics')) {
    db_create_table('search_api_postgresql_analytics', $schema['search_api_postgresql_analytics']);
  }
}

/**
 * Add cost tracking and metrics tables.
 */
function search_api_postgresql_update_8002() {
  $schema = search_api_postgresql_schema();
  
  if (!db_table_exists('search_api_postgresql_costs')) {
    db_create_table('search_api_postgresql_costs', $schema['search_api_postgresql_costs']);
  }
  
  if (!db_table_exists('search_api_postgresql_metrics')) {
    db_create_table('search_api_postgresql_metrics', $schema['search_api_postgresql_metrics']);
  }
}